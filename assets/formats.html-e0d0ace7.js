import{_ as t,O as e,P as a,a2 as d}from"./framework-6e4ab73c.js";const o={},i=d(`<h1 id="suri-domain-formats" tabindex="-1"><a class="header-anchor" href="#suri-domain-formats" aria-hidden="true">#</a> Suri domain formats</h1><p>Suris are defined by a series of names separated by dots <code>.</code>. Those names are called <em>level entries</em> because each of them belongs to a specific level, being the left-most the highest level.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>   Specificity
+ ────────────► -
suri.domains.docs
─┬── ─┬───── ─┬──
 │    │       └► 3rd level
 │    └► 2nd level
 └► 1st level
</code></pre></div><div class="hint-container note"><p class="hint-container-title">Insight</p><p>This works in the reverse order of the DNS hierarchy, where the deepest level is writen first. For example, the DNS domain <code>docs.suri.domains</code> would be written as <code>domains.suri.docs</code> in suri.</p></div><p>The level of an entire Suri is equal to the most specific level entry, or the count of level entries. In the previous example, the Suri <code>suri.domains.docs</code> has a level of 3.</p><p>When a Suri has a level of 1, it is called <strong>TLD</strong> suri or <em>Top Level Domain</em> <strong>Suri</strong>.</p><h2 id="canonical-format" tabindex="-1"><a class="header-anchor" href="#canonical-format" aria-hidden="true">#</a> Canonical format</h2><p>In canonical format, Suri level entries are displayed starting from the highest level on the left, to the lowest on the right being each level followed by a dot <code>.</code> but the last one.</p><ul><li><code>.</code> - root</li><li><code>com</code></li><li><code>domains</code></li><li><code>suri.domains</code></li><li><code>suri.domains.docs</code></li></ul><details class="hint-container details"><summary>Formal definition</summary><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;canonical_suri&gt; := &lt;root&gt; | &lt;suri&gt;
          &lt;root&gt; := &#39;.&#39;
          &lt;suri&gt; := &lt;name&gt; (&#39;.&#39; &lt;name&gt;)*
          &lt;name&gt; := &lt;name_char&gt;+ (&quot;-&quot;+ &lt;name_char&gt;+)*
     &lt;name_char&gt; := &lt;unicode_xid_body&gt; | &lt;unicode_number&gt; | &lt;emoji_pictographic&gt; | &lt;emoji_component&gt;
</code></pre></div></details><h2 id="tagged-format" tabindex="-1"><a class="header-anchor" href="#tagged-format" aria-hidden="true">#</a> Tagged format</h2><p>Finally, tagged format consist of a suri prefixed by a symbol, called tags, that gives them an extra meaning. Tagged suris have an equivalent version in the canonical format, therefore you can use any of both to reference the suri. The available tags are:</p><table><thead><tr><th>Name</th><th style="text-align:center;">Symbol</th><th>Tagged Form</th><th>Canonical Form</th></tr></thead><tbody><tr><td>Mention</td><td style="text-align:center;">@</td><td><code>@&lt;suri&gt;</code></td><td><code>tag.mention.&lt;suri&gt;</code></td></tr><tr><td>Hash / Hashtag</td><td style="text-align:center;">#</td><td><code>#&lt;suri&gt;</code></td><td><code>tag.hash.&lt;suri&gt;</code></td></tr><tr><td>Cash / Cashtag</td><td style="text-align:center;">$</td><td><code>$&lt;suri&gt;</code></td><td><code>tag.cash.&lt;suri&gt;</code></td></tr><tr><td>Anchor</td><td style="text-align:center;">&amp;</td><td><code>&amp;&lt;suri&gt;</code></td><td><code>tag.anchor.&lt;suri&gt;</code></td></tr><tr><td>Alert</td><td style="text-align:center;">!</td><td><code>!&lt;suri&gt;</code></td><td><code>tag.alert.&lt;suri&gt;</code></td></tr><tr><td>Question</td><td style="text-align:center;">?</td><td><code>?&lt;suri&gt;</code></td><td><code>tag.question.&lt;suri&gt;</code></td></tr><tr><td></td><td style="text-align:center;"></td><td></td><td></td></tr><tr><td>Bitcoin</td><td style="text-align:center;">₿</td><td><code>₿&lt;suri&gt;</code></td><td><code>tag.btc.&lt;suri&gt;</code></td></tr><tr><td>Ethereum</td><td style="text-align:center;">⧫</td><td><code>⧫&lt;suri&gt;</code></td><td><code>tag.eth.&lt;suri&gt;</code></td></tr><tr><td>Solana</td><td style="text-align:center;">◎</td><td><code>◎&lt;suri&gt;</code></td><td><code>tag.sol.&lt;suri&gt;</code></td></tr></tbody></table><p>For example:</p><ul><li><code>@myUserName.twitter</code> is equivalent to <code>tag.mention.myUserName.twitter</code>.</li></ul><details class="hint-container details"><summary>Formal definition</summary><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;tagged_suri&gt; := &lt;tag&gt; &lt;suri&gt;
        &lt;tag&gt; := one of [@#$&amp;!?₿⧫◎]
       &lt;suri&gt; := &lt;name&gt; (&#39;.&#39; &lt;name&gt;)*
       &lt;name&gt; := &lt;name_char&gt;+ (&quot;-&quot;+ &lt;name_char&gt;+)*
  &lt;name_char&gt; := &lt;unicode_xid_body&gt; | &lt;unicode_number&gt; | &lt;emoji_pictographic&gt; | &lt;emoji_component&gt;
</code></pre></div></details>`,16),r=[i];function l(n,s){return e(),a("div",null,r)}const g=t(o,[["render",l],["__file","formats.html.vue"]]);export{g as default};
