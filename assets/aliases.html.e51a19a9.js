import{_ as i,o as a,c as r,a as t,b as e,d as s,e as n,r as c}from"./app.6621d572.js";const l={},d=t("h1",{id:"alias-protocol",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#alias-protocol","aria-hidden":"true"},"#"),e(" Alias protocol")],-1),p=t("em",null,"Alias Protocol",-1),h=t("code",null,"CNAME",-1),u={href:"https://en.wikipedia.org/wiki/Domain_Name_System",target:"_blank",rel:"noopener noreferrer"},f=n(`<table><thead><tr><th>Name</th><th>Pattern</th><th>Description</th></tr></thead><tbody><tr><td>Alias</td><td><code>alias(EXACT_QUERY)</code></td><td>An alias of another record in the same suri</td></tr><tr><td>Remote Alias</td><td><code>alias(SURI_ADDRESS, EXACT_QUERY)</code></td><td>An alias of another record in another suri</td></tr></tbody></table><p>The <code>EXACT_QUERY</code> argument defines the signature to search on the target suri. That inner signature is also part of the signature of the outer record, so the signature of the record will be the addition of all the protocols inside and outside of <code>alias</code> without including it:</p><div class="language-text ext-text"><pre class="language-text"><code>   Record:    suri.domains:http+alias(tcp(80)+ipv4(127.0.0.1))
                           \u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500     \u2500\u2500\u2500\u2500
Protocols:                 http+alias+tcp    +ipv4

Signature: http+ipv4+tcp
</code></pre></div><div class="custom-container note"><p class="custom-container-title">Insight</p><p><code>EXACT_QUERY</code> cannot contain nested <code>alias</code> protocols.</p></div><h2 id="utilities" tabindex="-1"><a class="header-anchor" href="#utilities" aria-hidden="true">#</a> Utilities</h2><p>This protocol can be used to define complex dependencies between records, for example, you want to define the route to a website that exposes your CV including your picture. You want also to define that picture as your public profile picture for social networks. In this case, you can define two absolute records like this:</p><ul><li><strong>Website</strong>: <code>http+tls+tcp(443)+ipv4(127.0.0.1)</code></li><li><strong>Profile picture</strong>: <code>profile-pic+http(/path/to/picture.png)+tls+tcp(443)+ipv4(127.0.0.1)</code></li></ul><p>Or you can define a relative protocol so if you change the website address, you don&#39;t need to change the profile picture too:</p><ul><li><strong>Website</strong>: <code>http+tls+tcp(443)+ipv4(127.0.0.1)</code></li><li><strong>Profile picture</strong>: <code>http(/path/to/log.png)+alias(http+tls+tcp+ipv4)</code></li></ul><div class="custom-container note"><p class="custom-container-title">Insight</p><p>Have in mind that the alias protocol is not a redirection, it is a reference to another record, so the users will always see the same suri they searched for.</p></div><h2 id="replacements" tabindex="-1"><a class="header-anchor" href="#replacements" aria-hidden="true">#</a> Replacements</h2><p>In the previous example we used the record <code>http(/path/to/log.png)+alias(http+tls+tcp+ipv4)</code> to define an alias to the website&#39;s record. As you can see, there are two different <code>http</code> protocol definitions. The inner one specifies what to search in the target record (website&#39;s) while the outer one specifies a replacement so when the alias is resolved, the inner <code>http</code> value is replaced by the outer one.</p><p>In the following example you can see how to define replacements for some protocols (HTTP, TCP) while keeping others (IPv4):</p><div class="language-text ext-text"><pre class="language-text"><code>Origin Record: origin.suri:http(/path/to/file)+tcp(95)+alias(TARGET_SURI_ADDRESS, http+tls+tcp+ipv4)
                                                             \u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
                     \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518
               \u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500
Target Record: target.suri:http(/another/path)+tcp(80)+ip(127.0.0.1)
                                                       \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
 Final Record: origin.suri:http(/path/to/file)+tcp(95)+ip(127.0.0.1)
</code></pre></div><div class="custom-container note"><p class="custom-container-title">Insight</p><p>The default behaviour for replacements is to completely replace the inner protocol with the outer one, but it can be customized by protocol. For example, clients can replace <code>http</code> paths if the outer is absolute or merge them if it is relative.</p></div>`,15);function g(m,_){const o=c("ExternalLinkIcon");return a(),r("div",null,[d,t("p",null,[e("The "),p,e(" is a special protocol that enables searching part or all the content of a record in another one of the same suri or another. It acts similar to a "),h,e(" record in "),t("a",u,[e("DNS"),s(o)]),e(" protocol.")]),f])}const b=i(l,[["render",g],["__file","aliases.html.vue"]]);export{b as default};
