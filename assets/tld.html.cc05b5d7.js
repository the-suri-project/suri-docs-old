import{_ as a,o as i,c as s,a as o,b as e,d as t,e as c,r as l}from"./app.75df36fd.js";const d={},r=o("h1",{id:"top-level-domains-tld",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#top-level-domains-tld","aria-hidden":"true"},"#"),e(" Top Level Domains (TLD)")],-1),p=o("code",null,"suri.domains",-1),u=o("code",null,"suri",-1),h={href:"https://www.icann.org/",target:"_blank",rel:"noopener noreferrer"},m=c('<div class="custom-container note"><p class="custom-container-title">Insight</p><p><strong>Suri</strong> has liberated the TLDs, allowing users to acquire any TLD they want, not having to use a subdomain anymore.</p></div><p>Allowing people to buy TLDs gives <strong>Suri</strong> a reduction of the number of subdomains needed, so for a Web2 domain like <code>docs.mywebsite.com</code> we would only need <code>docs.mywebsite</code>. This reduction allows us to reverse the way domains are written, therefore placing the TLD at the start of the domain instead of at the end, emphasizing the identity we are referring to and then the extra information, in the form of subdomains.</p><p>For example, imagine we have a company &quot;Fake Company, LTD&quot;, which is present in multiple countries with different languages. Our company exposes a landing to present the company and its products, a blog to share news and a documentation website to help users. In Web2 we could have a structure like:</p><ul><li><code>fakecompany.com</code> - english landing <ul><li><code>blog.fakecompany.com</code> - english blog</li><li><code>docs.fakecompany.com</code> - english docs</li></ul></li><li><code>fakecompany.es</code> - spanish landing <ul><li><code>blog.fakecompany.es</code> - spanish blog</li><li><code>docs.fakecompany.es</code> - spanish docs</li></ul></li></ul><p>This structure imposes our company to buy <code>fakecompany.com</code> and <code>fakecompany.es</code> and then create subdomains for its internal services. With <strong>Suri</strong> we will have a structure like:</p><ul><li><code>fakecompany</code> - english landing <ul><li><code>fakecompany.blog</code> - english blog</li><li><code>fakecompany.docs</code> - english docs</li></ul></li><li><code>fakecompany.es</code> - spanish landing <ul><li><code>fakecompany.es.blog</code> - spanish blog</li><li><code>fakecompany.es.docs</code> - spanish docs</li></ul></li></ul><p>Everything is inside our main suri <code>fakecompany</code>, which represents our identity, so anyone can directly type our name to access our default (english) web or easily localize it appending the country code.</p><p>As we only require <code>fakecompany</code> we don&#39;t need to buy <code>fakecompany.com</code>, <code>fakecompany.es</code> and all the other possibilities.</p><p>Last but not least, we are always emphasizing our identity, because is what the user types first.</p>',9);function y(f,g){const n=l("ExternalLinkIcon");return i(),s("div",null,[r,o("p",null,[e("Top Level Domains are the most generic names in a suri, for example the TLD of "),p,e(" is "),u,e(". In Web2 the TLD are ruled by the "),o("a",h,[e("ICANN"),t(n)]),e(" or big companies and are very limited in their usability.")]),m])}const w=a(d,[["render",y],["__file","tld.html.vue"]]);export{w as default};
