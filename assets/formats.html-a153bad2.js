import{_ as t,O as e,P as o,a2 as d}from"./framework-6e4ab73c.js";const a={},i=d(`<h1 id="formatos-de-dominio-suri" tabindex="-1"><a class="header-anchor" href="#formatos-de-dominio-suri" aria-hidden="true">#</a> Formatos de dominio Suri</h1><p>Los Suris se definen mediante una serie de nombres separados por puntos <code>.</code>. Esos nombres se llaman <em>nombres de nivel</em> porque cada uno de ellos pertenecen a un nivel específico, siendo el más a la izquierda el nivel más alto.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>   Específico
+ ────────────► -
suri.domains.docs
─┬── ─┬───── ─┬──
 │    │       └► 3er nivel
 │    └► 2do nivel
 └► 1er nivel
</code></pre></div><div class="hint-container note"><p class="hint-container-title">Más info</p><p>Esto funciona en el orden inverso a los actuales dominios de DNS, donde el nivel más profundo se escribe primero. Por ejemplo, el dominio DNS dominio <code>docs.suri.domains</code> se escribiría como <code>domains.suri.docs</code> en <strong>Suri</strong>.</p></div><p>El nivel de un suri completo es igual al <em>nombre de nivel</em> más específico, o al recuento de nombres. En el ejemplo anterior ejemplo, el suri <code>suri.domains.docs</code> tiene un nivel de 3.</p><p>Cuando un Suri tiene un nivel de 1, se llama suri <strong>TLD</strong> o suri de primer nivel.</p><h2 id="formato-canonico" tabindex="-1"><a class="header-anchor" href="#formato-canonico" aria-hidden="true">#</a> Formato canónico</h2><p>En el formato canónico, los nombres de nivel se escriben empezando por el nivel más alto a la izquierda, hasta el más bajo a la derecha siendo cada nivel seguido de un punto <code>.</code> excepto el último.</p><ul><li><code>.</code> - raíz</li><li><code>com</code></li><li><code>dominios</code></li><li><code>suri.domains</code></li><li><code>suri.domains.docs</code></li></ul><details class="hint-container details"><summary>Definición formal</summary><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;canonical_suri&gt; := &lt;root&gt; | &lt;suri&gt;
          &lt;root&gt; := &#39;.&#39;
          &lt;suri&gt; := &lt;name&gt; (&#39;.&#39; &lt;name&gt;)*
          &lt;name&gt; := &lt;name_char&gt;+ (&quot;-&quot;+ &lt;name_char&gt;+)*
     &lt;name_char&gt; := &lt;unicode_xid_body&gt; | &lt;unicode_number&gt; | &lt;emoji_pictographic&gt; | &lt;emoji_component&gt;
</code></pre></div></details><h2 id="formato-etiquetado" tabindex="-1"><a class="header-anchor" href="#formato-etiquetado" aria-hidden="true">#</a> Formato etiquetado</h2><p>Por último, los formatos etiquetados consisten en un suri prefijado por un símbolo, llamado etiqueta (tag en inglés), que les da un significado extra. El formato etiquetado tiene una versión equivalente en el formato canónico, por lo que se puede utilizar cualquiera de los dos para hacer referencia al suri. Las etiquetas disponibles son:</p><table><thead><tr><th>Nombre</th><th style="text-align:center;">Símbolo</th><th>Forma etiquetada</th><th>Forma canónica</th></tr></thead><tbody><tr><td>Mención<br>(Mention)</td><td style="text-align:center;">@</td><td><code>@&lt;suri&gt;</code></td><td><code>tag.mention.&lt;suri&gt;</code></td></tr><tr><td>Tema<br>(Hash / Hashtag)</td><td style="text-align:center;">#</td><td><code>#&lt;suri&gt;</code></td><td><code>tag.hash.&lt;suri&gt;</code></td></tr><tr><td>Dinero<br>(Cash / Cashtag)</td><td style="text-align:center;">$</td><td><code>$&lt;suri&gt;</code></td><td><code>tag.cash.&lt;suri&gt;</code></td></tr><tr><td>Ancla<br>(Anchor)</td><td style="text-align:center;">&amp;</td><td><code>&amp;&lt;suri&gt;</code></td><td><code>tag.anchor.&lt;suri&gt;</code></td></tr><tr><td>Alerta<br>(Alert)</td><td style="text-align:center;">!</td><td><code>!&lt;suri&gt;</code></td><td><code>tag.alert.&lt;suri&gt;</code></td></tr><tr><td>Pregunta<br>(Question)</td><td style="text-align:center;">?</td><td><code>?&lt;suri&gt;</code></td><td><code>tag.question.&lt;suri&gt;</code></td></tr><tr><td></td><td style="text-align:center;"></td><td></td><td></td></tr><tr><td>Bitcoin</td><td style="text-align:center;">₿</td><td><code>₿&lt;suri&gt;</code></td><td><code>tag.btc.&lt;suri&gt;</code></td></tr><tr><td>Ethereum</td><td style="text-align:center;">⧫</td><td><code>⧫&lt;suri&gt;</code></td><td><code>tag.eth.&lt;suri&gt;</code></td></tr><tr><td>Solana</td><td style="text-align:center;">◎</td><td><code>◎&lt;suri&gt;</code></td><td><code>tag.sol.&lt;suri&gt;</code></td></tr></tbody></table><p>Por ejemplo:</p><ul><li><code>@miUsuario.twitter</code> is equivalent to <code>tag.mention.miUsuario.twitter</code>.</li></ul><details class="hint-container details"><summary>Definición formal</summary><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;tagged_suri&gt; := &lt;tag&gt; &lt;suri&gt;
        &lt;tag&gt; := one of [@#$&amp;!?₿⧫◎]
       &lt;suri&gt; := &lt;name&gt; (&#39;.&#39; &lt;name&gt;)*
       &lt;name&gt; := &lt;name_char&gt;+ (&quot;-&quot;+ &lt;name_char&gt;+)*
  &lt;name_char&gt; := &lt;unicode_xid_body&gt; | &lt;unicode_number&gt; | &lt;emoji_pictographic&gt; | &lt;emoji_component&gt;
</code></pre></div></details>`,16),n=[i];function r(l,s){return e(),o("div",null,n)}const u=t(a,[["render",r],["__file","formats.html.vue"]]);export{u as default};
