import{_ as e,o as t,c as a,e as i}from"./app.76887a14.js";const o={},s=i('<h1 id="tagged-suris" tabindex="-1"><a class="header-anchor" href="#tagged-suris" aria-hidden="true">#</a> Tagged suris</h1><p>Tagged suris consist of a prefix denoting a special meaning and a list of suri names separated by a dot <code>.</code>, e.g. <code>@myUserName.twitter</code>, <code>#subject</code>, <code>$USDC</code>, etc.</p><div class="custom-container note"><p class="custom-container-title">Insight</p><p>Tagged domains are just a special representation of an equivalent canonical suri, thus they do not have any special meaning to the system or added functionality.</p></div><p>The idea behind this representation is to emphasize an identity or a subject, which is more relevant than the rest of the suri. This is especially useful for suris that belong to users or brands.</p><p>Some examples are:</p><ul><li><p>We want to use a suri as a source of our digital identity, we can use a <em>mention</em> <code>@username</code> and then use subdomains to split the content for our social networks, e.g. <code>@username.twitter</code>, <code>@username.facebook</code>, etc.</p></li><li><p>A Web3 project is minting a new token and exposing its data using a <em>cashtag</em> <code>$MY_TOKEN</code>. They want to store its public information, like where to buy it, the project&#39;s website..., in the suri&#39;s records but storing the pricing information in <code>$MY_TOKEN.pricing</code> to separate the concepts and using the suri as a kind of oracle.</p></li></ul><p>If instead of using a tagged suri we used a regular suri, we would have ended with <code>twitter.username</code> or <code>pricing.MY_TOKEN</code> which are perfectly fine but do not emphasize the actual subject of the action.</p><p>You can check the full <a href="/en/domains/formats#tagged-format">definition</a> and all tagged types in the following section.</p>',8),n=[s];function c(r,d){return t(),a("div",null,n)}const h=e(o,[["render",c],["__file","tagged.html.vue"]]);export{h as default};
