import{_ as t,o as r,c as s,a as c,b as o,d as n,w as a,e as i,r as l}from"./app.e2a03fd5.js";const p={},d=i(`<h1 id="record-protocols" tabindex="-1"><a class="header-anchor" href="#record-protocols" aria-hidden="true">#</a> Record Protocols</h1><p>Records are defined by the protocol placed in them and the arguments of those protocols. A record can contain one or more protocols making a protocol stack in which the first protocol is the top one and the rest are placed below.</p><p>A website definition requires an IP address, a TCP port, whether to use TLS protocol or not, and the HTTP protocol, thus it would be defined as: <code>http+tls+tcp(443)+ipv4(0.0.0.0)</code>. This corresponds to the stack:</p><div class="language-text ext-text"><pre class="language-text"><code>3. [Application level] http
2.   [Transport level] tls
2.   [Transport level] tcp(443)
1.     [Network level] ipv4(0.0.0.0)
</code></pre></div><p>In the <a href="/protocol/records/protocols/standard">following section</a> you can find the list of protocols with native support in <strong>Suri</strong> but anyone can use any custom protocol and combine them with other protocols in order to build a custom stack.</p><p>For example, social networks can use the following protocol stacks to access users&#39; public information:</p><ul><li><code>profile+name+text(USERNAME)</code> for name.</li><li><code>profile+desc+text(DESCRIPTION)</code> for description.</li><li><code>profile+pic+http+tls+tcp(443)+dns(WEB_DOMAIN_OF_MY_PICTURE)</code> for profile picture.</li></ul>`,7);function h(u,f){const e=l("RouterLink");return r(),s("div",null,[d,c("p",null,[o("This kind of composition opens together with the "),n(e,{to:"/protocol/searching/"},{default:a(()=>[o("search algorithm")]),_:1}),o(" opens a wide range of possibilities to increment the use cases of suris.")])])}const _=t(p,[["render",h],["__file","index.html.vue"]]);export{_ as default};
