import{_ as a,O as i,P as s,Q as o,$ as e,a0 as r,a2 as c,F as d}from"./framework-6e4ab73c.js";const l={},t=o("h1",{id:"dominios-de-primer-nivel-tlds",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#dominios-de-primer-nivel-tlds","aria-hidden":"true"},"#"),e(" Dominios de primer nivel (TLDs)")],-1),m=o("code",null,"suri.domains",-1),p=o("code",null,"suri",-1),u={href:"https://www.icann.org/",target:"_blank",rel:"noopener noreferrer"},f=c('<div class="hint-container note"><p class="hint-container-title">Más info</p><p><strong>Suri</strong> liberaliza los TLDs, permitiendo a los usuarios adquirir cualquier TLD que deseen, no teniendo que utilizar un subdominio.</p></div><p>Permitir a la gente comprar TLDs da a <strong>Suri</strong> una reducción del número de subdominios necesarios, así que para un dominio Web2 como <code>docs.mywebsite.com</code> solo necesitaríamos <code>docs.mywebsite</code>. Esta reducción nos permite invertir la forma en que se escriben los dominios, colocando así el TLD al principio del dominio en lugar de al final, enfatizando la identidad a la que nos referimos y luego la información extra, en forma de subdominios.</p><p>Por ejemplo, imaginemos que tenemos una empresa &quot;Fake Company, LTD&quot;, que está presente en varios países con diferentes idiomas. Nuestra empresa expone una landing para presentar la empresa y sus productos, un blog para compartir noticias y una web de documentación para ayudar a los usuarios. En Web2 podríamos tener una estructura como</p><ul><li><code>fakecompany.com</code> - landing en inglés <ul><li><code>blog.fakecompany.com</code> - blog en inglés</li><li><code>docs.fakecompany.com</code> - documentación en inglés</li></ul></li><li><code>fakecompany.es</code> - landing en español <ul><li><code>blog.fakecompany.es</code> - blog en español</li><li><code>docs.fakecompany.es</code> - documentación en español</li></ul></li></ul><p>Esta estructura impone a nuestra empresa comprar <code>fakecompany.com</code> y <code>fakecompany.es</code> y luego crear subdominios para sus servicios internos. Con <strong>Suri</strong> tendremos una estructura como:</p><ul><li><code>fakecompany</code> - landing en inglés <ul><li><code>fakecompany.blog</code> - blog en inglés</li><li><code>fakecompany.docs</code> - documentación en inglés</li></ul></li><li><code>fakecompany.es</code> - landing en español <ul><li><code>fakecompany.es.blog</code> - blog en español</li><li><code>fakecompany.es.docs</code> - documentación en español</li></ul></li></ul><p>Todo está dentro de nuestro suri principal <code>fakecompany</code>, que representa nuestra identidad, por lo que cualquiera puede escribir directamente nuestro nombre para acceder a nuestra web por defecto (inglés) o localizarla fácilmente añadiendo el código del país.</p><p>Como solo necesitamos <code>fakecompany</code> no necesitamos comprar <code>fakecompany.com</code>, <code>fakecompany.es</code> y todas las demás posibilidades.</p><p>Por último, pero no por ello menos importante, siempre estamos enfatizando nuestra identidad, porque es lo que el usuario escribe y lee primero.</p>',9);function g(y,b){const n=d("ExternalLinkIcon");return i(),s("div",null,[t,o("p",null,[e("Los dominios de nivel superior son los nombres más genéricos de un suri, por ejemplo el TLD de "),m,e(" es "),p,e(". En Web2 los TLD están regidos por la "),o("a",u,[e("ICANN"),r(n)]),e(" o por grandes empresas y tienen una utilidad muy limitada.")]),f])}const k=a(l,[["render",g],["__file","tld.html.vue"]]);export{k as default};
